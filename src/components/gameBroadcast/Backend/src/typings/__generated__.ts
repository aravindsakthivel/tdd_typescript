import { IContext } from './index';
/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export enum IRoles {
  ADMIN = 'ADMIN',
  BROADCASTER = 'BROADCASTER',
  AUDITOR = 'AUDITOR',
  EMPLOYEE = 'EMPLOYEE'
}

export interface IAddUserRequest {
  requestedBy: string;
  role: IRoles;
  fullName: string;
  mobileNumber: string;
  emailId: string;
}

export interface IAddUserResponse {
  message?: string;
  isSuccess?: boolean;
}

export interface IBook {
  title?: string;
  author?: string;
}

export interface IAuthor {
  name?: string;
  books?: Array<IBook | null>;
}

export interface IGenerateReferralLinkRequest {
  userId: string;
  destination: string;
}

export interface IGenerateReferralLinkResponse {
  referralUrl?: string;
  destination?: string;
}

export interface IGetReferralLinksRequest {
  userId: string;
  offset: number;
  count: number;
}

export interface IReferralLink {
  link?: string;
  createdAt?: string;
  destination?: string;
  onBoarded?: string;
}

export interface IGetReferralLinksResponse {
  referralLinkDetails?: Array<IReferralLink | null>;
}

export interface IUser {
  firstName?: string;
  lastName?: string;
}

export interface ICreateObjectRequest {
  requestId?: string;
  params?: ICreateObjectParams;
}

export interface ICreateObjectParams {
  owner?: string;
  prefix?: string;
  allowPublicAccess?: boolean;
  fileName?: string;
  extension?: string;
  contentType?: string;
  contentDisposition?: string;
}

export interface ISSObject {
  id?: string;
  owner?: string;
  prefix?: string;
  isPublic?: boolean;
  contentType?: string;
  contentDisposition?: string;
}

export enum IReason {
  NONE = 'NONE',
  UNKNOWN = 'UNKNOWN',
  BAD_REQUEST = 'BAD_REQUEST',
  EXTERNAL_ERROR = 'EXTERNAL_ERROR',
  TEMPORARY_OBJECT_NOT_FOUND = 'TEMPORARY_OBJECT_NOT_FOUND',
  FAILED_TO_FETCH_FROM_WEB_URI = 'FAILED_TO_FETCH_FROM_WEB_URI',
  OBJECT_NOT_FOUND = 'OBJECT_NOT_FOUND'
}

export interface IStorageServiceError {
  reason?: IReason;
  message?: string;
}

export interface ICreateObjectResponse {
  error?: IStorageServiceError;
  object?: ISSObject;
  uploadUrl?: string;
}

export interface IMutation {
  addUser?: IAddUserResponse;
  addBook?: IBook;
  generateReferralLink: IGenerateReferralLinkResponse;
  createObject?: ICreateObjectResponse;
}

export interface IQuery {
  _entities: Array<I_Entity | null>;
  _service: I_Service;
  books?: Array<IBook | null>;
  authors?: Array<string | null>;
  getReferralLinks: IGetReferralLinksResponse;
  users?: Array<IUser | null>;
}

export type I_Entity = IBook | IAuthor | IUser;

/** Use this to resolve union type _Entity */
export type IPossible_EntityTypeNames = 'Book' | 'Author' | 'User';

export interface I_EntityNameMap {
  _Entity: I_Entity;
  Book: IBook;
  Author: IAuthor;
  User: IUser;
}

export type I_Any = any;

export interface I_Service {
  
  /**
   * The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied
   */
  sdl?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface IResolver {
  AddUserResponse?: IAddUserResponseTypeResolver;
  Book?: IBookTypeResolver;
  Author?: IAuthorTypeResolver;
  GenerateReferralLinkResponse?: IGenerateReferralLinkResponseTypeResolver;
  ReferralLink?: IReferralLinkTypeResolver;
  GetReferralLinksResponse?: IGetReferralLinksResponseTypeResolver;
  User?: IUserTypeResolver;
  SSObject?: ISSObjectTypeResolver;
  StorageServiceError?: IStorageServiceErrorTypeResolver;
  CreateObjectResponse?: ICreateObjectResponseTypeResolver;
  Mutation?: IMutationTypeResolver;
  Query?: IQueryTypeResolver;
  _Entity?: {
    __resolveType: I_EntityTypeResolver
  };
  
  _Any?: GraphQLScalarType;
  _Service?: I_ServiceTypeResolver;
}
export interface IAddUserResponseTypeResolver<TParent = IAddUserResponse> {
  message?: AddUserResponseToMessageResolver<TParent>;
  isSuccess?: AddUserResponseToIsSuccessResolver<TParent>;
}

export interface AddUserResponseToMessageResolver<TParent = IAddUserResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AddUserResponseToIsSuccessResolver<TParent = IAddUserResponse, TResult = boolean | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IBookTypeResolver<TParent = IBook> {
  title?: BookToTitleResolver<TParent>;
  author?: BookToAuthorResolver<TParent>;
}

export interface BookToTitleResolver<TParent = IBook, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface BookToAuthorResolver<TParent = IBook, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IAuthorTypeResolver<TParent = IAuthor> {
  name?: AuthorToNameResolver<TParent>;
  books?: AuthorToBooksResolver<TParent>;
}

export interface AuthorToNameResolver<TParent = IAuthor, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface AuthorToBooksResolver<TParent = IAuthor, TResult = Array<IBook | null> | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IGenerateReferralLinkResponseTypeResolver<TParent = IGenerateReferralLinkResponse> {
  referralUrl?: GenerateReferralLinkResponseToReferralUrlResolver<TParent>;
  destination?: GenerateReferralLinkResponseToDestinationResolver<TParent>;
}

export interface GenerateReferralLinkResponseToReferralUrlResolver<TParent = IGenerateReferralLinkResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface GenerateReferralLinkResponseToDestinationResolver<TParent = IGenerateReferralLinkResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IReferralLinkTypeResolver<TParent = IReferralLink> {
  link?: ReferralLinkToLinkResolver<TParent>;
  createdAt?: ReferralLinkToCreatedAtResolver<TParent>;
  destination?: ReferralLinkToDestinationResolver<TParent>;
  onBoarded?: ReferralLinkToOnBoardedResolver<TParent>;
}

export interface ReferralLinkToLinkResolver<TParent = IReferralLink, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ReferralLinkToCreatedAtResolver<TParent = IReferralLink, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ReferralLinkToDestinationResolver<TParent = IReferralLink, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ReferralLinkToOnBoardedResolver<TParent = IReferralLink, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IGetReferralLinksResponseTypeResolver<TParent = IGetReferralLinksResponse> {
  referralLinkDetails?: GetReferralLinksResponseToReferralLinkDetailsResolver<TParent>;
}

export interface GetReferralLinksResponseToReferralLinkDetailsResolver<TParent = IGetReferralLinksResponse, TResult = Array<IReferralLink | null> | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IUserTypeResolver<TParent = IUser> {
  firstName?: UserToFirstNameResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
}

export interface UserToFirstNameResolver<TParent = IUser, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface UserToLastNameResolver<TParent = IUser, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ISSObjectTypeResolver<TParent = ISSObject> {
  id?: SSObjectToIdResolver<TParent>;
  owner?: SSObjectToOwnerResolver<TParent>;
  prefix?: SSObjectToPrefixResolver<TParent>;
  isPublic?: SSObjectToIsPublicResolver<TParent>;
  contentType?: SSObjectToContentTypeResolver<TParent>;
  contentDisposition?: SSObjectToContentDispositionResolver<TParent>;
}

export interface SSObjectToIdResolver<TParent = ISSObject, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SSObjectToOwnerResolver<TParent = ISSObject, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SSObjectToPrefixResolver<TParent = ISSObject, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SSObjectToIsPublicResolver<TParent = ISSObject, TResult = boolean | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SSObjectToContentTypeResolver<TParent = ISSObject, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SSObjectToContentDispositionResolver<TParent = ISSObject, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IStorageServiceErrorTypeResolver<TParent = IStorageServiceError> {
  reason?: StorageServiceErrorToReasonResolver<TParent>;
  message?: StorageServiceErrorToMessageResolver<TParent>;
}

export interface StorageServiceErrorToReasonResolver<TParent = IStorageServiceError, TResult = IReason | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface StorageServiceErrorToMessageResolver<TParent = IStorageServiceError, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface ICreateObjectResponseTypeResolver<TParent = ICreateObjectResponse> {
  error?: CreateObjectResponseToErrorResolver<TParent>;
  object?: CreateObjectResponseToObjectResolver<TParent>;
  uploadUrl?: CreateObjectResponseToUploadUrlResolver<TParent>;
}

export interface CreateObjectResponseToErrorResolver<TParent = ICreateObjectResponse, TResult = IStorageServiceError | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CreateObjectResponseToObjectResolver<TParent = ICreateObjectResponse, TResult = ISSObject | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface CreateObjectResponseToUploadUrlResolver<TParent = ICreateObjectResponse, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IMutationTypeResolver<TParent = undefined> {
  addUser?: MutationToAddUserResolver<TParent>;
  addBook?: MutationToAddBookResolver<TParent>;
  generateReferralLink?: MutationToGenerateReferralLinkResolver<TParent>;
  createObject?: MutationToCreateObjectResolver<TParent>;
}

export interface MutationToAddUserArgs {
  data?: IAddUserRequest;
}
export interface MutationToAddUserResolver<TParent = undefined, TResult = IAddUserResponse | null> {
  (parent: TParent, args: MutationToAddUserArgs, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToAddBookArgs {
  title?: string;
  author?: string;
}
export interface MutationToAddBookResolver<TParent = undefined, TResult = IBook | null> {
  (parent: TParent, args: MutationToAddBookArgs, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToGenerateReferralLinkArgs {
  data?: IGenerateReferralLinkRequest;
}
export interface MutationToGenerateReferralLinkResolver<TParent = undefined, TResult = IGenerateReferralLinkResponse> {
  (parent: TParent, args: MutationToGenerateReferralLinkArgs, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationToCreateObjectArgs {
  data?: ICreateObjectRequest;
}
export interface MutationToCreateObjectResolver<TParent = undefined, TResult = ICreateObjectResponse | null> {
  (parent: TParent, args: MutationToCreateObjectArgs, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface IQueryTypeResolver<TParent = undefined> {
  _entities?: QueryTo_entitiesResolver<TParent>;
  _service?: QueryTo_serviceResolver<TParent>;
  books?: QueryToBooksResolver<TParent>;
  authors?: QueryToAuthorsResolver<TParent>;
  getReferralLinks?: QueryToGetReferralLinksResolver<TParent>;
  users?: QueryToUsersResolver<TParent>;
}

export interface QueryTo_entitiesArgs {
  representations: Array<I_Any>;
}
export interface QueryTo_entitiesResolver<TParent = undefined, TResult = Array<I_Entity | null>> {
  (parent: TParent, args: QueryTo_entitiesArgs, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryTo_serviceResolver<TParent = undefined, TResult = I_Service> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToBooksResolver<TParent = undefined, TResult = Array<IBook | null> | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToAuthorsResolver<TParent = undefined, TResult = Array<string | null> | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToGetReferralLinksArgs {
  data?: IGetReferralLinksRequest;
}
export interface QueryToGetReferralLinksResolver<TParent = undefined, TResult = IGetReferralLinksResponse> {
  (parent: TParent, args: QueryToGetReferralLinksArgs, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToUsersResolver<TParent = undefined, TResult = Array<IUser | null> | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface I_EntityTypeResolver<TParent = I_Entity> {
  (parent: TParent, context: IContext, info: GraphQLResolveInfo): 'Book' | 'Author' | 'User' | Promise<'Book' | 'Author' | 'User'>;
}
export interface I_ServiceTypeResolver<TParent = I_Service> {
  sdl?: _ServiceToSdlResolver<TParent>;
}

export interface _ServiceToSdlResolver<TParent = I_Service, TResult = string | null> {
  (parent: TParent, args: {}, context: IContext, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}
